#!/usr/bin/env bash

set -ueo pipefail

RC=0

COLOR_RED='\e[31m'
COLOR_GREEN='\e[32m'
NO_COLOR='\e[0m'

function red() {
    echo -e "${COLOR_RED}$@${NO_COLOR}"
}

function green() {
    echo -e "${COLOR_GREEN}$@${NO_COLOR}"
}

POLICY_DIR_PATH=${1:-"policies"}
POLICY_FILE_SUFFIX=${2:-"json"}

PARLIAMENT_MINIMUM_SEVERITY=${INPUT_MINIMUM_SEVERITY:-}

POLICY_FILES={}
PARLIAMENT_ARGS=()

if [[ ! -z  "${PARLIAMENT_MINIMUM_SEVERITY}" ]]; then
    PARLIAMENT_ARGS+="--minimum_severity ${PARLIAMENT_MINIMUM_SEVERITY}"
fi

PARLIAMENT_VERSION="$(python -c 'import pkg_resources; print(pkg_resources.get_distribution("parliament").version)')"

echo "Policy dir path: ${POLICY_DIR_PATH}"
echo "Policy file suffix: ${POLICY_FILE_SUFFIX}"
echo "parliament version: ${PARLIAMENT_VERSION}"
echo "parliament arguments: ${PARLIAMENT_ARGS[@]}"
echo

echo "ALL FILES:"
find /home/runner/work/iam-lint/ -type f

POLICY_FILES="$(find ${POLICY_DIR_PATH} -type f -name "*.${POLICY_FILE_SUFFIX}")"
echo "FILES: ${POLICY_FILES[@]}"
if [[ -z "${POLICY_FILES}" ]]; then
    red "No policy files found!"

    RC=1
    exit ${RC}
fi

while read file;
do
    echo -n "==> Linting $file... "

    OUTPUT="$(parliament ${PARLIAMENT_ARGS[@]} --file $file 2>&1 || true)"
    if [[ -n "${OUTPUT}" ]]; then
        red "FAILED"
        echo "${OUTPUT}"

        RC=1
    else
        green "OK"
    fi
done <<< "${POLICY_FILES[@]}"

exit ${RC}
